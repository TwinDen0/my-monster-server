generator client {
  provider      = "prisma-client-js"
  output        = "generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  coins    Int @default(0)
  crystals Int @default(0)

  telegramId String @unique @map("telegram_id")
  username   String @unique
  fullName   String @map("full_name")
  reputation Int    @default(0)
  userAvatar String @map("user_avatar")

  evoPlaces Int @default(3)

  collection Collection[]

  @@map("user")
}

model TypeMonster {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  name    String
  img     String?
  element EnumTypeElement

  description String

  monsters Monster[]

  @@map("type_monster")
}

model Monster {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  type   TypeMonster? @relation(fields: [typeId], references: [id])
  typeId String?      @map("leader_id")

  subtypeName String @map("subtype_name")
  img         String
  stageEvo    Int    @default(0) @map("stage_evo")
  branchEvo   Int    @default(0) @map("branch_evo")
  starts      Int
  hunger      Int    @default(100)

  xpNextLvl Int @default(2880)

  collection    Collection[]
  dailyMonsters DailyMonsters[]

  @@map("monster")
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  leader   User?   @relation(fields: [leaderId], references: [id])
  leaderId String? @map("leader_id")

  monster   Monster? @relation(fields: [monsterId], references: [id])
  monsterId String?  @map("monster_id")

  name String?

  hungerLevel Int @default(0)
  xp          Int @default(0)

  miningXp Int @default(1)

  isEvo   Boolean @default(false)
  isSleep Boolean @default(false)

  @@map("collection")
}

// market
model DailyMonsters {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")
  date      DateTime @default(now())

  price String

  isCoinsPrice Boolean @map("is_coins_price")

  monster   Monster? @relation(fields: [monsterId], references: [id])
  monsterId String?  @map("monster_id")

  @@map("daily_monsters")
}

// market
model Pack {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  name        String
  description String
  img         String

  type  String // с маркета или нет
  endAt DateTime? @map("end_at") // если он с маркета

  priceCoin    Int? @map("price_coin")
  priceCrystal Int? @map("price_crystal")

  coinMin Int @map("coin_min")
  coinMax Int @map("coin_max")

  crystalMin Int @map("crystal_min")
  crystalMax Int @map("crystal_max")

  percentDropMonster Int   @map("percent_drop_monster")
  monsters           Json? // {id: String, percent: 13}

  @@map("pack")
}

enum EnumTypeElement {
  FIRE
  WATER
  GROUND
  ICE
  ELECTRIC
  AIR
  DARK
  GRASS
  LIGHT
  NEUTRAL
}
